#---WHENEVER IT ASKS TO ENTER A VALUE : ENTER yes------(In Small Letters)-------
#-----CHANGE BELOW 3 VARIABLES-----

export bucket_name=tf-bucket-89756
export instance_name=tf-instance-425088
export vpc_name=tf-vpc-784379
#-------------STEP 1--------
touch main.tf
touch variables.tf
mkdir modules
cd modules
mkdir instances
cd instances
touch instances.tf
touch outputs.tf
touch variables.tf
cd ..
mkdir storage
cd storage
touch storage.tf
touch outputs.tf
touch variables.tf
cd
export PROJECT_ID=$(gcloud config list --format 'value(core.project)')
ZONE=$(gcloud compute instances list --filter="name=tf-instance-1" --format "get(zone)" | awk -F/ '{print $NF}')
export REGION=us-east1
export instance_id_1=$(gcloud compute instances describe tf-instance-1 --project=$PROJECT_ID --zone=$ZONE --format="value(id)")
export instance_id_2=$(gcloud compute instances describe tf-instance-2 --project=$PROJECT_ID --zone=$ZONE --format="value(id)")
echo $instance_id_1
echo $instance_id_2

cat > variables.tf <<EOF
variable "region" {
 default = "$REGION"
}

variable "zone" {
 default = "$ZONE"
}

variable "project_id" {
 default = "$PROJECT_ID"
}
EOF

cat > modules/instances/variables.tf <<EOF
variable "region" {
 default = "$REGION"
}

variable "zone" {
 default = "$ZONE"
}

variable "project_id" {
 default = "$PROJECT_ID"
}
EOF

cat > modules/storage/variables.tf <<EOF
variable "region" {
 default = "$REGION"
}

variable "zone" {
 default = "$ZONE"
}

variable "project_id" {
 default = "$PROJECT_ID"
}
EOF


cat > main.tf <<EOF
terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region

  zone        = var.zone
}

module "instances" {

  source     = "./modules/instances"

}
EOF

terraform init

#---------------STEP 2-----------------------------

cat > modules/instances/instances.tf <<EOF
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-medium"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-medium"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}
EOF

terraform import module.instances.google_compute_instance.tf-instance-1 $instance_id_1
terraform import module.instances.google_compute_instance.tf-instance-2 $instance_id_2

terraform plan
terraform apply

#------------------STEP 3-------------------------------
cat > modules/storage/storage.tf <<EOF
resource "google_storage_bucket" "storage-bucket" {
  name          = "$bucket_name"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}
EOF

tee -a main.tf <<EOF
module "storage" {
  source     = "./modules/storage"
}
EOF
terraform init
terraform apply

#--------------STEP 4-------------------------------
rm -rf main.tf
touch main.tf
cat > main.tf <<EOF
terraform {
  backend "gcs" {
    bucket  = "$bucket_name"
 prefix  = "terraform/state"
  }
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region

  zone        = var.zone
}

module "instances" {

  source     = "./modules/instances"

}
module "storage" {
  source     = "./modules/storage"
}

EOF

terraform init

#-------STEP 5------------------------
rm -rf modules/instances/instances.tf
touch modules/instances/instances.tf
cat > modules/instances/instances.tf <<EOF
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}
resource "google_compute_instance" "$instance_name" {
  name         = "$instance_name"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}
EOF
terraform init
terraform apply
terraform taint module.instances.google_compute_instance.$instance_name
#--------------

terraform plan
terraform apply

#-----STEP 6--------------------------------
rm -rf modules/instances/instances.tf
touch modules/instances/instances.tf
cat > modules/instances/instances.tf <<EOF
resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}
EOF

terraform apply

#-------STEP 7------------------------------
tee -a main.tf <<EOF
module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 6.0.0"

    project_id   = "$PROJECT_ID"
    network_name = "$vpc_name"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "$REGION"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "$REGION"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        },
    ]
}
EOF
terraform init
terraform apply

#-------STEP 8------------------------------
rm -rf modules/instances/instances.tf
touch modules/instances/instances.tf
cat > modules/instances/instances.tf <<EOF
resource "google_compute_instance" "tf-instance-1"{
  name         = "tf-instance-1"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "$vpc_name"
     subnetwork = "subnet-01"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2"{
  name         = "tf-instance-2"
  machine_type = "e2-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "$vpc_name"
     subnetwork = "subnet-02"
  }

  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 6.0.0"

    project_id   = "$PROJECT_ID"
    network_name = "$vpc_name"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "$REGION"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "$REGION"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        },
    ]
}

EOF
terraform init
terraform apply
#----IGNORE THE ERROR : Already exist"---
#---------------------STEP 9------------------------------------
tee -a main.tf <<EOF
resource "google_compute_firewall" "tf-firewall"{
  name    = "tf-firewall"
 network = "projects/$PROJECT_ID/global/networks/$vpc_name"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_tags = ["web"]
  source_ranges = ["0.0.0.0/0"]
}
EOF
terraform init
terraform apply
#----IGNORE THE ERROR : Already exist"---

#---------------------LAB COMPLETED------------------------------------



